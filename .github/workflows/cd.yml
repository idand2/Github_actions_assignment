# .github/workflows/cd.yml

name: Continuous Deployment

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: your-app-name

      - name: Build image and export to tar
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=image.tar
          platforms: linux/amd64

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar

  test-deployment:
    name: Mimic Deployment with Docker Compose
    needs: build-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load image from tarball
        run: docker load --input image.tar

      - name: Get the image tag
        id: image_tag
        run: echo "tag=$(docker images --format '{{.Repository}}:{{.Tag}}' | head -n 1)" >> $GITHUB_OUTPUT

      - name: Create .env file for Docker Compose
        run: echo "WEB_IMAGE_TAG=${{ steps.image_tag.outputs.tag }}" > .env

      - name: Run the container using Docker Compose
        run: docker-compose up -d

      - name: Verify Container Health
        id: health_check
        run: |
          CONTAINER_NAME=$(docker-compose ps -q web)
          for i in {1..3}
          do
            status=$(docker inspect --format '{{.State.Health.Status}}' $CONTAINER_NAME)
            echo "Attempt $i: Container status is $status"
            if [ "$status" = "healthy" ]; then
              echo "Container is healthy!"
              exit 0
            fi
            sleep 1
          done
          echo "Container did not become healthy in time"
          echo "storing logs to docker_log.txt---"
          docker-compose logs web > docker_log.txt
          exit 1

      - name: Upload Docker logs on failure
        if: failure() && steps.health_check.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: docker-logs
          path: docker_log.txt

      - name: Stop the container
        if: always()
        run: docker-compose down